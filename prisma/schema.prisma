// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldbstaging"  //Staging
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldb"      //Live
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

model Role {
  id         Int     @id @default(autoincrement())
  name       String
  is_deleted Boolean @default(false)

  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  User       AdminUser[]

  @@map("role")
}

model AdminUser {
  id         Int     @id @default(autoincrement())
  name       String
  password   String
  email      String  @unique
  role_id    Int
  is_deleted Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  Role Role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([role_id])
  @@map("admin_user")
}

model Customer {
  id           Int               @id @default(autoincrement())
  email        String            @unique
  username     String?           @default("")
  password     String
  is_approved  Boolean           @default(false)
  otp          String            @default("")
  first_name   String?
  profile_pic  String?
  last_name    String?
  phone_number String?
  country      String?
  gender       GenderEnums       @default(male)
  role         CustomerTypeEnums @default(seller)
  dob          DateTime?
  is_registerd Boolean           @default(false)
  is_deleted   Boolean           @default(false)
  is_blocked   Boolean           @default(false)
  is_verified  Boolean           @default(false)
  is_disabled  Boolean           @default(false)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @default(now())
  Order        Order[]

  ClientProjects    Projects[]          @relation(name: "client")
  ProjectTickets    ProjectTickets[]
  Projects          Projects[]
  OrderEvent        OrderEvent[]
  OrderSubscription OrderSubscription[]

  @@map("customer")
}

model Projects {
  id            Int          @id @default(autoincrement())
  name          String
  desc          String
  thumb         String?
  material_type MaterialType @default(dump)
  price         Int?
  total_rounds  Int?
  meta          String?
  is_enabled    Boolean      @default(false)
  is_featured   Boolean      @default(false)
  client_id     Int?
  user_id       Int
  launch_date   DateTime     @default(now())
  end_date      DateTime     @default(now())
  draw_date     DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now())
  is_deleted    Boolean      @default(false)
  created_by    Int

  Client Customer? @relation(name: "client", fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ProjectTickets ProjectTickets[]

  ProjectAddress  ProjectAddress[]
  Customer        Customer?         @relation(fields: [created_by], references: [id])
  ProjectTruckers ProjectTruckers[]

  @@index([user_id])
  @@map("project")
}

model ProjectTruckers {
  id         Int  @id @default(autoincrement())
  project_id Int
  trucker_id Int?

  is_invited    Boolean @default(false)
  is_registered Boolean @default(false)
  is_deleted    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id])
  @@map("project_trucker")
}

model ProjectAddress {
  id               Int         @id @default(autoincrement())
  project_id       Int
  street_address_1 String?
  street_address_2 String?
  longitude        String?
  latitude         String?
  country          String?
  state            String?
  city             String?
  phone_number     String?
  phone_code       String?     @default("+971")
  address_type     AddressType @default(pick)
  postal_code      String?     @default("")
  is_default       Boolean     @default(false)
  is_deleted       Boolean     @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id])
  @@map("project_address")
}

model ProjectTickets {
  id          Int    @id @default(autoincrement())
  ticket_num  Int
  project_id  Int
  customer_id Int?
  load        String

  status TicketEnums @default(pending)

  is_deleted Boolean @default(false)

  Projects Projects  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Customer Customer? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([customer_id, project_id])
  @@map("project_ticket")
}

model Order {
  id               Int        @id @default(autoincrement())
  sub_total_amount Float
  discount_amount  Float
  total_amount     Float
  status           OrderEnums @default(pending)
  first_name       String
  parent_order_id  Int?
  customer_id      Int
  total_payment_id String
  last_name        String
  email            String
  dob              DateTime
  street_address   String
  apartment        String?
  country          String
  state            String
  city             String
  phone_number     String
  postal_code      String
  is_deleted       Boolean    @default(false)

  Customer    Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ParentOrder Order?   @relation(name: "ParentOrder", fields: [parent_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  OrderEvent        OrderEvent[]
  Order             Order[]             @relation("ParentOrder")
  OrderSubscription OrderSubscription[]

  @@index([customer_id])
  @@map("order")
}

model OrderEvent {
  id           Int     @id @default(autoincrement())
  order_id     Int
  event_id     Int
  customer_id  Int
  ticket_price Int
  quantity     Int
  is_subscribe Boolean @default(false)
  is_deleted   Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  Order    Order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Customer Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id, event_id])
  @@map("order_event")
}

model OrderSubscription {
  id                    Int                @id @default(autoincrement())
  ticket_price          Int
  quantity              Int
  customer_id           Int
  order_id              Int
  event_id              Int
  total_subscription_id String?
  subscription_type     SubscriptionEnums? @default(weekly)
  is_deleted            Boolean            @default(false)
  is_canceled           Boolean            @default(false)

  next_date  DateTime @default(now()) @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  Customer Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Order    Order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id, order_id, event_id])
  @@map("order_subscription")
}

enum SettingEnums {
  BANNER
  WONDER
  PAYMENT
  IMAGE_GALLERY
  CONFIG
}

enum LanguageEnums {
  rtl
  ltr
}

enum SubscriptionEnums {
  weekly
  monthly
  quarterly
}

enum OrderEnums {
  pending
  paid
  rejected
}

enum CouponEnums {
  percentage
  fixed
}

enum MaterialType {
  dump
  sand
}

enum TicketEnums {
  pending
  hold
  paid
  rejected
}

enum CustomerTypeEnums {
  seller
  buyer
  trucker
  client
}

enum AddressType {
  pick
  drop
}

enum GenderEnums {
  male
  female
}

// Tables

// Front tables
//1- Customers
//2- Categories
//3- Charity
//3- Events
//3- Event Images
//3- Events FAQs 
//4- Orders
//4- Orders Details
//5- Coupons

// Admin tables
//7- Users
//8- Roles
//9- Resource
//10- Roles Permissions
//11- Settings?
//12- CMS
//6- FAQs
