// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldbstaging"  //Staging
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldb"      //Live
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

model Resources {
  id         Int     @id @default(autoincrement())
  name       String
  code       String
  parent     Int?
  is_deleted Boolean @default(false)

  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  RolePermission RolePermission[]

  @@map("resources")
}

model Role {
  id         Int               @id @default(autoincrement())
  name       CustomerTypeEnums
  is_deleted Boolean           @default(false)

  created_at    DateTime         @default(now()) @db.Timestamp(6)
  updated_at    DateTime         @default(now()) @db.Timestamp(6)
  AdminUser     AdminUser[]
  User          User[]
  RolePermsions RolePermission[]

  @@map("role")
}

model RolePermission {
  id          Int        @id @default(autoincrement())
  access      roleAccess @default(N)
  resource_id Int
  role_id     Int
  is_deleted  Boolean    @default(false)

  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  Role       Role       @relation(fields: [role_id], references: [id])
  Resources  Resources? @relation(fields: [resource_id], references: [id])

  @@map("role_permission")
}

model AdminUser {
  id         Int     @id @default(autoincrement())
  name       String
  password   String
  email      String  @unique
  role_id    Int
  is_deleted Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  Role Role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([role_id])
  @@map("admin_user")
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  username       String?     @default("")
  password       String?
  first_name     String?
  profile_pic    String?
  last_name      String?
  phone_number   String?
  gender         GenderEnums @default(male)
  role_id        Int?
  wallet_address String?
  device_id      String?
  is_registerd   Boolean     @default(false)
  is_deleted     Boolean     @default(false)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())

  ClientProjects  Projects[]        @relation(name: "client")
  ProjectTickets  ProjectTickets[]
  Projects        Projects[]
  ProjectTruckers ProjectTruckers[] @relation(name: "truckers")
  UserTruckers    ProjectTruckers[]
  Role            Role?             @relation(fields: [role_id], references: [id])

  @@map("user")
}

model Projects {
  id               Int           @id @default(autoincrement())
  name             String
  desc             String?
  thumb            String?
  material_type    MaterialType  @default(dump)
  truck_cap        TruckCapEnums @default(half)
  price            Int?
  total_rounds     Int?
  transaction_hash String?

  client_id     Int?
  created_by    Int
  is_invoiced   Boolean   @default(false)
  start_date    DateTime  @default(now())
  start_time    DateTime? @default(now())
  delivery_date DateTime  @default(now())
  delivery_time DateTime? @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  is_deleted    Boolean   @default(false)

  Client User? @relation(name: "client", fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User   User? @relation(fields: [created_by], references: [id])

  ProjectTickets  ProjectTickets[]
  ProjectAddress  ProjectAddress[]
  ProjectTruckers ProjectTruckers[]

  @@index([client_id, created_by])
  @@map("project")
}

model ProjectAddress {
  id               Int         @id @default(autoincrement())
  project_id       Int
  street_address_1 String?
  street_address_2 String?
  longitude        String?
  latitude         String?
  country          String?
  state            String?
  city             String?
  address_type     AddressType @default(pick)

  postal_code String? @default("")
  is_default  Boolean @default(false)
  is_deleted  Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id])
  @@map("project_address")
}

model ProjectTruckers {
  id         Int  @id @default(autoincrement())
  project_id Int
  trucker_id Int? // tuckers address form user table
  created_by Int? // project turcker created by user

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Trucker  User?    @relation(name: "truckers", fields: [trucker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User     User?    @relation(fields: [created_by], references: [id])

  @@index([project_id])
  @@map("project_trucker")
}

model ProjectTickets {
  id         Int     @id @default(autoincrement())
  project_id Int
  trucker_id Int?
  comments   String?
  signature  String?
  tx_hash    String

  status TicketEnums @default(pending)

  is_deleted Boolean @default(false)

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Trucker  User?    @relation(fields: [trucker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([trucker_id, project_id])
  @@map("project_ticket")
}

enum GenderEnums {
  male
  female
}

enum TruckCapEnums {
  half
  full
}

enum MaterialType {
  dump
  sand
}

enum CustomerTypeEnums {
  admin
  seller_buyer
  seller_trucker
  trucker
  client
}

enum AddressType {
  pick
  drop
}

enum TicketEnums {
  pending
  hold
  completed
  rejected
}

enum roleAccess {
  W
  R
  N
}
