// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldbstaging"  //Staging
  // url      = "postgres://default:Akym1JnOVP9z@ep-soft-mode-76400388.us-east-1.postgres.vercel-storage.com:5432/verceldb"      //Live
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

model Role {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  is_deleted Boolean @default(false)

  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  User       AdminUser[]

  @@map("role")
}

model AdminUser {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  password   String
  email      String  @unique
  role_id    String  @db.ObjectId
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Role Role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Post Category[]

  @@index([role_id])
  @@map("admin_user")
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  thumb      String
  user_id    String   @db.ObjectId
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  User     AdminUser  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Projects Projects[]

  @@index([user_id])
  @@map("category")
}

model Projects {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  desc          String
  thumb         String?
  material_type MaterialType @default(dump)
  price         Int?
  total_rounds  Int?
  meta          String?
  is_enabled    Boolean      @default(false)
  is_featured   Boolean      @default(false)
  client_id     String?      @db.ObjectId
  trucker_id    String[]     @db.ObjectId
  user_id       String       @db.ObjectId
  launch_date   DateTime     @default(now())
  end_date      DateTime     @default(now())
  draw_date     DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now())
  is_deleted    Boolean      @default(false)
  created_by    String       @db.ObjectId

  Client   Customer? @relation(name: "client", fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Truckers Customer? @relation(name: "trucker", fields: [trucker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  CartItem       CartItem[]
  EventImages    EventImage[]
  ProjectTickets ProjectTickets[]
  Category       Category?        @relation(fields: [categoryId], references: [id])
  categoryId     String?          @db.ObjectId
  ProjectAddress ProjectAddress[]
  Customer       Customer?        @relation(fields: [created_by], references: [id])

  @@index([user_id])
  @@map("Project")
}

model EventImage {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  thumb      String
  project_id String  @db.ObjectId
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id])
  @@map("event_image")
}

model Customer {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  email        String            @unique
  username     String?           @default("")
  password     String
  is_approved  Boolean           @default(false)
  otp          String            @default("")
  first_name   String?
  profile_pic  String?
  last_name    String?
  phone_number String?
  country      String?
  gender       GenderEnums       @default(male)
  role         CustomerTypeEnums @default(seller)
  dob          DateTime?
  is_deleted   Boolean           @default(false)
  is_blocked   Boolean           @default(false)
  is_verified  Boolean           @default(false)
  is_disabled  Boolean           @default(false)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @default(now())
  Order        Order[]

  Cart          Cart[]
  DeleteRequest DeleteRequest[]

  ClientProjects  Projects[]       @relation(name: "client")
  TtuckerProjects Projects[]       @relation(name: "trucker")
  ProjectTickets  ProjectTickets[]
  Projects        Projects[]

  @@map("customer")
}

model DeleteRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customer_id String   @db.ObjectId
  reason      String?
  comment     String?
  is_deleted  Boolean? @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  Customer    Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id])
  @@map("delete_request")
}

model ProjectAddress {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  project_id       String      @db.ObjectId
  street_address_1 String?
  street_address_2 String?
  country          String?
  state            String?
  city             String?
  phone_number     String?
  phone_code       String?     @default("+971")
  address_type     AddressType @default(pick)
  postal_code      String?     @default("")
  is_default       Boolean     @default(false)
  is_deleted       Boolean     @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Projects Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([project_id])
  @@map("project_address")
}

model Cart {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  customer_id String  @db.ObjectId
  is_deleted  Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Customer  Customer   @relation(fields: [customer_id], references: [id])
  CartItems CartItem[]

  @@index([customer_id])
  @@map("cart")
}

model CartItem {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  cart_id      String  @db.ObjectId
  project_id   String  @db.ObjectId
  quantity     String  @db.ObjectId
  is_subscribe Boolean @default(false)
  is_deleted   Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Cart     Cart     @relation(fields: [cart_id], references: [id])
  Projects Projects @relation(fields: [project_id], references: [id])

  @@index([cart_id, project_id])
  @@map("cart_item")
}

model Order {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  sub_total_amount Float
  discount_amount  Float
  total_amount     Float
  status           OrderEnums @default(pending)
  first_name       String
  parent_order_id  String?    @db.ObjectId
  customer_id      String     @db.ObjectId
  total_payment_id String
  last_name        String
  email            String
  dob              DateTime
  street_address   String
  apartment        String?
  country          String
  state            String
  city             String
  phone_number     String
  postal_code      String
  is_deleted       Boolean    @default(false)

  Customer    Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ParentOrder Order?   @relation(name: "ParentOrder", fields: [parent_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Order Order[] @relation("ParentOrder")

  @@index([customer_id])
  @@map("order")
}

model ProjectTickets {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  ticket_num  Int
  project_id  String  @db.ObjectId
  customer_id String? @db.ObjectId
  load        String

  status TicketEnums @default(pending)

  is_deleted Boolean @default(false)

  Projects Projects  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Customer Customer? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([customer_id, project_id])
  @@map("project_ticket")
}

enum MaterialType {
  dump
  sand
}

enum GenderEnums {
  male
  female
}

enum CustomerTypeEnums {
  seller
  buyer
  trucker
  client
}

enum AddressType {
  pick
  drop
}

enum TicketEnums {
  pending
  hold
  paid
  rejected
}

enum OrderEnums {
  pending
  hold
  paid
  rejected
}

enum CouponEnums {
  percentage
  fixed
}

// Tables

// Front tables
//1- Customers
//2- Categories
//3- Charity
//3- Events
//3- Event Images
//3- Events FAQs 
//4- Orders
//4- Orders Details
//5- Coupons

// Admin tables
//7- Users
//8- Roles
//9- Resource
//10- Roles Permissions
//11- Settings?
//12- CMS
//6- FAQs
