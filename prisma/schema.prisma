generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int         @id @default(autoincrement())
  name       String
  is_deleted Boolean     @default(false)
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  User       AdminUser[]

  @@map("role")
}

model Setting {
  id         Int          @id @default(autoincrement())
  group      SettingEnums @default(BANNER)
  key        String
  value      String       @db.LongText
  lang_id    Int?         @default(1)
  is_deleted Boolean      @default(false)
  is_enabled Boolean      @default(false)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  Language   Language?    @relation(fields: [lang_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([lang_id])
  @@map("setting")
}

model AdminUser {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  role_id      Int
  is_deleted   Boolean        @default(false)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  Role         Role           @relation(fields: [role_id], references: [id], onUpdate: Restrict)
  Post         Category[]
  CMS          CMS[]
  Event        Event[]

  @@index([role_id])
  @@map("admin_user")
}

model Language {
  id                  Int                   @id @default(autoincrement())
  name                String
  code                String
  dir                 LanguageEnums         @default(ltr)
  is_default          Boolean               @default(false)
  is_deleted          Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  CategoryDescription CategoryDescription[]
  CharityDescription  CharityDescription[]
  CMSDescription      CMSDescription[]
  EventDescription    EventDescription[]
  EventFAQ            EventFAQ[]
  Setting             Setting[]

  @@map("language")
}

model Charity {
  id                 Int                  @id @default(autoincrement())
  price              Int
  thumb              String
  is_deleted         Boolean              @default(false)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  CharityDescription CharityDescription[]
  Event              Event[]

  @@map("charity")
}

model CharityDescription {
  id         Int      @id @default(autoincrement())
  name       String
  desc       String?  @db.LongText
  lang_id    Int
  charity_id Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Charity    Charity  @relation(fields: [charity_id], references: [id], onUpdate: Restrict)
  Language   Language @relation(fields: [lang_id], references: [id], onUpdate: Restrict)

  @@index([charity_id], map: "charity_description_charity_id_fkey")
  @@index([lang_id], map: "charity_description_lang_id_fkey")
  @@map("charity_description")
}

model Category {
  id                  Int                   @id @default(autoincrement())
  thumb               String
  user_id             Int
  is_deleted          Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  User                AdminUser             @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  CategoryDescription CategoryDescription[]
  Event               Event[]

  @@index([user_id])
  @@map("category")
}

model CategoryDescription {
  id          Int      @id @default(autoincrement())
  name        String
  desc        String?  @db.LongText
  lang_id     Int
  category_id Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  Category    Category @relation(fields: [category_id], references: [id], onUpdate: Restrict)
  Language    Language @relation(fields: [lang_id], references: [id], onUpdate: Restrict)

  @@index([category_id, lang_id])
  @@index([lang_id], map: "category_description_lang_id_fkey")
  @@map("category_description")
}

model Event {
  id                Int                 @id @default(autoincrement())
  thumb             String
  video_src         String?
  price             Int
  cash_alt          Int?
  total_tickets     Int
  tickets_sold      Int?
  user_ticket_limit Int
  is_cash_alt       Boolean             @default(false)
  is_enabled        Boolean             @default(false)
  is_featured       Boolean             @default(false)
  user_id           Int
  category_id       Int
  launch_date       DateTime?           @default(now()) @db.Timestamp(6)
  end_date          DateTime?           @default(now()) @db.Timestamp(6)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  is_deleted        Boolean             @default(false)
  charity_id        Int
  cart_item         cart_item[]
  Category          Category            @relation(fields: [category_id], references: [id], onUpdate: Restrict)
  Charity           Charity             @relation(fields: [charity_id], references: [id], onUpdate: Restrict)
  User              AdminUser           @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  EventDescription  EventDescription[]
  EventFAQs         EventFAQ[]
  EventImages       EventImage[]
  OrderEvent        OrderEvent[]
  OrderSubscription OrderSubscription[]

  @@index([user_id, category_id])
  @@index([category_id], map: "event_category_id_fkey")
  @@index([charity_id], map: "event_charity_id_fkey")
  @@map("event")
}

model EventDescription {
  id           Int      @id @default(autoincrement())
  name         String
  desc         String?  @db.LongText
  comp_details String?
  lang_id      Int
  event_id     Int
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  Event        Event    @relation(fields: [event_id], references: [id], onUpdate: Restrict)
  Language     Language @relation(fields: [lang_id], references: [id], onUpdate: Restrict)

  @@index([event_id, lang_id])
  @@index([lang_id], map: "event_description_lang_id_fkey")
  @@map("event_description")
}

model EventImage {
  id         Int      @id @default(autoincrement())
  thumb      String
  event_id   Int
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Event      Event    @relation(fields: [event_id], references: [id], onUpdate: Restrict)

  @@index([event_id])
  @@map("event_image")
}

model EventFAQ {
  id         Int      @id @default(autoincrement())
  question   String
  answer     String   @db.LongText
  lang_id    Int
  event_id   Int
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Event      Event    @relation(fields: [event_id], references: [id], onUpdate: Restrict)
  Language   Language @relation(fields: [lang_id], references: [id], onUpdate: Restrict)

  @@index([event_id, lang_id])
  @@index([lang_id], map: "event_faq_lang_id_fkey")
  @@map("event_faq")
}

model Customer {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  username          String              @unique
  password          String
  is_approved       Boolean             @default(false)
  otp               String              @default("")
  first_name        String
  profile_pic       String?
  last_name         String
  dob               DateTime?
  is_deleted        Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  cart              cart[]
  CustomerAddress   CustomerAddress[]
  Order             Order[]
  OrderSubscription OrderSubscription[]

  @@map("customer")
}

model CustomerAddress {
  id               Int      @id @default(autoincrement())
  customer_id      Int
  street_address_1 String
  street_address_2 String?
  country          String
  state            String
  city             String
  phone_number     String
  postal_code      Int
  is_deleted       Boolean  @default(false)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  Customer         Customer @relation(fields: [customer_id], references: [id], onUpdate: Restrict)

  @@index([customer_id])
  @@map("customer_address")
}

model Order {
  id                Int                 @id @default(autoincrement())
  total_amount      Int
  status            OrderEnums          @default(pending)
  first_name        String
  parent_order_id   Int?
  customer_id       Int
  last_name         String
  email             String
  dob               DateTime
  street_address_1  String
  street_address_2  String?
  country           String
  state             String
  city              String
  phone_number      String
  postal_code       Int
  is_deleted        Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  Customer          Customer            @relation(fields: [customer_id], references: [id], onUpdate: Restrict)
  ParentOrder       Order?              @relation("ParentOrder", fields: [parent_order_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Order             Order[]             @relation("ParentOrder")
  OrderEvent        OrderEvent[]
  OrderSubscription OrderSubscription[]

  @@index([customer_id])
  @@index([parent_order_id], map: "order_parent_order_id_fkey")
  @@map("order")
}

model OrderEvent {
  id                Int                @id @default(autoincrement())
  order_id          Int
  event_id          Int
  ticket_price      Int
  quantity          Int
  subscription_id   Int?
  is_deleted        Boolean            @default(false)
  created_at        DateTime           @default(now()) @db.Timestamp(6)
  updated_at        DateTime           @default(now()) @db.Timestamp(6)
  Event             Event              @relation(fields: [event_id], references: [id], onUpdate: Restrict)
  Order             Order              @relation(fields: [order_id], references: [id], onUpdate: Restrict)
  OrderSubscription OrderSubscription? @relation(fields: [subscription_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([order_id, event_id])
  @@index([event_id], map: "order_event_event_id_fkey")
  @@index([subscription_id], map: "order_event_subscription_id_fkey")
  @@map("order_event")
}

model OrderSubscription {
  id                    Int                @id @default(autoincrement())
  ticket_price          Int
  quantity              Int
  customer_id           Int
  order_id              Int
  event_id              Int
  total_subscription_id String?
  subscription_type     SubscriptionEnums? @default(weekly)
  is_deleted            Boolean            @default(false)
  next_date             DateTime           @default(now()) @db.Timestamp(6)
  created_at            DateTime           @default(now()) @db.Timestamp(6)
  updated_at            DateTime           @default(now()) @db.Timestamp(6)
  OrderEvent            OrderEvent[]
  Customer              Customer           @relation(fields: [customer_id], references: [id], onUpdate: Restrict)
  Event                 Event              @relation(fields: [event_id], references: [id], onUpdate: Restrict)
  Order                 Order              @relation(fields: [order_id], references: [id], onUpdate: Restrict)

  @@index([customer_id, order_id, event_id])
  @@index([event_id], map: "order_subscription_event_id_fkey")
  @@index([order_id], map: "order_subscription_order_id_fkey")
  @@map("order_subscription")
}

model Winner {
  id          Int       @id @default(autoincrement())
  customer_id Int
  event_id    Int
  ticket_num  Int
  is_cash_alt Boolean   @default(false)
  is_enabled  Boolean   @default(false)
  is_deleted  Boolean   @default(false)
  draw_date   DateTime? @default(now()) @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)

  @@index([customer_id, event_id])
  @@map("winner")
}

model CMS {
  id             Int              @id @default(autoincrement())
  user_id        Int
  slug           String
  type           CMSEnums         @default(static)
  is_deleted     Boolean          @default(false)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  User           AdminUser        @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  CMSDescription CMSDescription[]

  @@index([user_id])
  @@map("cms")
}

model CMSDescription {
  id            Int      @id @default(autoincrement())
  cms_id        Int
  title         String
  desc          String
  meta_keywords String
  lang_id       Int
  content       String   @db.LongText
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  CMS           CMS      @relation(fields: [cms_id], references: [id], onUpdate: Restrict)
  Language      Language @relation(fields: [lang_id], references: [id], onUpdate: Restrict)

  @@index([lang_id])
  @@index([cms_id], map: "cms_description_cms_id_fkey")
  @@map("cms_description")
}

model cart {
  id          Int         @id @default(autoincrement())
  customer_id Int
  is_deleted  Boolean     @default(false)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  customer    Customer    @relation(fields: [customer_id], references: [id])
  cart_item   cart_item[]

  @@index([customer_id])
}

model cart_item {
  id                Int                          @id @default(autoincrement())
  cart_id           Int
  event_id          Int
  quantity          Int
  is_subscribe      Boolean                      @default(false)
  is_deleted        Boolean                      @default(false)
  created_at        DateTime                     @default(now()) @db.Timestamp(6)
  updated_at        DateTime                     @default(now()) @db.Timestamp(6)
  subscription_type cart_item_subscription_type?
  cart              cart                         @relation(fields: [cart_id], references: [id])
  event             Event                        @relation(fields: [event_id], references: [id])

  @@index([cart_id, event_id])
  @@index([event_id], map: "cart_item_event_id_fkey")
}

enum SettingEnums {
  BANNER
  WONDER
  PAYMENT
}

enum LanguageEnums {
  rtl
  ltr
}

enum SubscriptionEnums {
  weekly
  monthly
  quarterly
}

enum CMSEnums {
  faqs
  static
}

enum OrderEnums {
  pending
  paid
  rejected
}

enum cart_item_subscription_type {
  weekly
  monthly
  quarterly
}
